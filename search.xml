<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + Github Pages 搭建个人网站</title>
    <url>/2020/09/05/hexo-building/</url>
    <content><![CDATA[<p>作为一名基本不会编程只学了一阵python的真·小白，记录一下探索的过程～</p>
<h1 id="Github新建项目"><a href="#Github新建项目" class="headerlink" title="Github新建项目"></a>Github新建项目</h1><p>在 GitHub 新建一个仓库（Repository），然后去到 Settings，开启Github Pages，成功后就会提示你可以在https://{username}.github.io/{Repository Name}/中进行发布。</p>
<p>比如我的github username是whitelephantee，如果我建一个叫做YujiaZhou的Repository，开启Github Pages后就能在<a href="https://whitelephantee.github.io/YujiaZhou/%E5%8F%91%E5%B8%83%EF%BC%8C">https://whitelephantee.github.io/YujiaZhou/发布，</a></p>
<p>一个特殊的Repository名是{username.github.io}，如果命名为这个的话Github就会自动合并。比如我（GitHub用户名是whitelephantee）把个人主页的Repository命名为whitelephantee.github.io的话，我的域名就不是<a href="https://whitelephantee.github.io/whitelephantee.github.io/%EF%BC%8C%E8%80%8C%E6%98%AFhttps://whitelephantee.github.io/%E3%80%82">https://whitelephantee.github.io/whitelephantee.github.io/，而是https://whitelephantee.github.io/。</a></p>
<p>新建完成之后就可以进行后续操作了。</p>
<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%89%E8%A3%85">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p>
<p>安装成功后可以在terminal输入以下代码进行确认，如果返回版本号的话就安装成功啦。</p>
<pre><code>node -v
npm -v</code></pre>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>Hexo就是我们要用来搭建博客的平台。</p>
<p>注意一定要有sudo，我看网上的教程都没有sudo，但我实际操作中没有sudo就不行诶。</p>
<pre><code>sudo npm install -g hexo-cli</code></pre>
<h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><p>创建项目。</p>
<pre><code>hexo init &#123;name&#125;
cd &#123;name&#125;
npm install</code></pre>
<p>这里面的 {name} 就是我们想给这个个人主页起的名称，比如我就起了whitelephantee。</p>
<pre><code>hexo init whitelephantee
cd whitelephantee
npm install</code></pre>
<p>然后可以确认一下里面的文档。</p>
<pre><code>ls</code></pre>
<p>预览一下</p>
<pre><code>hexo s</code></pre>
<p>出现这个就说明成功了，可以在浏览器里输入<a href="http://localhost:4000看一下就可以，这是Hexo的默认界面，之后等连接上Github之后可以再修改。">http://localhost:4000看一下就可以，这是Hexo的默认界面，之后等连接上Github之后可以再修改。</a></p>
<pre><code> Hexo is running at http://localhost:4000 . Press Ctrl+C to stop</code></pre>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gifvhmss82j31c00u0e81.jpg" alt="截屏2020-09-05 下午4.51.13"></p>
<p>预览好之后就可以按ctrl+c结束预览，然后进入下一步。</p>
<h1 id="链接Github"><a href="#链接Github" class="headerlink" title="链接Github"></a>链接Github</h1><h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>首先看一下自己本身有没有SSH Key，如果没有报错的话就说明有SSH Key。</p>
<pre><code>cd ~/.ssh</code></pre>
<p>有的话直接查看一下。</p>
<pre><code>cat ~/.ssh/id_rsa.pub</code></pre>
<p>就算有的话还要再确认一下并添加主机到本机SSH可信列表。如果返回Hi xxx! You are successfully authenticated, but Github does not provide shell access. 的话就对啦，如果显示Permission denied(public key)的话，则表明需要重新生成SSH Key。</p>
<pre><code>ssh -T git@github.com</code></pre>
<p>无论是没有还是需要重新生成都可以参考这个。</p>
<p><a href="https://docs.github.com/en/github/authenticating-to-github/error-permission-denied-publickey">Github Docs: Error: Permission denied (public key)</a> 里 <a href="https://docs.github.com/en/github/authenticating-to-github/error-permission-denied-publickey#make-sure-you-have-a-key-that-is-being-used">Make sure you have a key that is being used</a> 部分，并按照指示 <a href="https://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account">新增SSH Key</a> 并 <a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">添加到Github中</a></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>打开_config.yml 文件</p>
<pre><code>cd &#123;name&#125;
open _config.yml</code></pre>
<p>找到 Deployment 这个地方，更改一下deploy这个地方，中间repo这个链接打开应该是Github里Respository的链接，修改完保存。</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/&#123;Repository Name&#125;/&#123;Project Name&#125;
  branch: master</code></pre>
<p>安装一个插件。</p>
<pre><code>npm install hexo-deployer-git --save</code></pre>
<p>之后进行部署，如果最后一行返回 INFO  Deploy done: git 就说明好啦。</p>
<pre><code>hexo g -d</code></pre>
<p>我们可以去 Github Pages 看一眼，比如我回到 <a href="https://whitelephantee.github.io/">https://whitelephantee.github.io/</a> 看一下就能够看到和原来在localhost上的预览界面一样的界面啦。</p>
<h1 id="部署网页"><a href="#部署网页" class="headerlink" title="部署网页"></a>部署网页</h1><p>虽然现在链接好了，但是个人网页里面的内容都还没有调整。</p>
<h2 id="更改基本信息"><a href="#更改基本信息" class="headerlink" title="更改基本信息"></a>更改基本信息</h2><p>继续打开_config.yml 文件</p>
<pre><code>open _config.yml</code></pre>
<p>找到 site 部分</p>
<pre><code>title: 小白象 #个人网页名称
subtitle: whitelephantee #副标题
description: 小白象的个人主页 想到什么写什么 #描述
keywords: #关键词
author: whitelephantee #作者
language: zh-CN #语言,默认的是en英语，我打算写中文的居多所以改成中文</code></pre>
<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>Hexo 的主题就有很多，默认的是 landscape，其他得主题可以在 <a href="https://hexo.io/themes/">Hexo Theme</a> 里进行预览，找到心仪的之后下载下来，比如我下载了 next 主题。</p>
<pre><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre>
<p>在_config.yml 里找到 theme 部分，进行更改。</p>
<pre><code>theme: next</code></pre>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>进入主题的_config.yml 文件（注意不是 project 的 _config.yml 文件），按自己的喜好进行一下更改和调整，还是以我的为例。</p>
<pre><code>cd themes
cd next
open _config.yml</code></pre>
<p>Minify：自动删除不必要的文件</p>
<pre><code>minify: true</code></pre>
<p>footer - icon：在最下面作者和年份默认会有一个心形小图标，我想换成一个大象的图标。</p>
<pre><code>icon:
    # Icon name in Font Awesome. See: https://fontawesome.com/icons
    name: fa fa-elephant
    # If you want to animate the icon, set it to true.
    animated: false
    # Change the color of icon, using Hex Code.
    color: &quot;#000000&quot;</code></pre>
<p>scheme：next一共提供了4种样式，默认是Muse，我选择了Pisces。</p>
<pre><code>scheme: Pisces</code></pre>
<p>Menu: 默认的标签栏只有主页和归档页，但hexo还提供了一些备选项，包括标签页、分类页等，可以按需开启。</p>
<pre><code>menu:
  home: / || fa fa-home
  #about: /about/ || fa fa-user
  tags: /tags/ || fa fa-tags
  categories: /categories/ || fa fa-th
  archives: /archives/ || fa fa-archive
  schedule: /schedule/ || fa fa-calendar
  sitemap: /sitemap.xml || fa fa-sitemap
  #commonweal: /404/ || fa fa-heartbeat</code></pre>
<p>avatar：小头像，把目标图片文件放到 themes/next/source/images/avatar.JPG 路径，然后再在主题的_config.yml 文件中进行更改。</p>
<pre><code>avatar:
  # Replace the default image and set the url here.
  url: /images/avatar.JPG
  # If true, the avatar will be dispalyed in circle.
  rounded: true
  # If true, the avatar will be rotated with the cursor.
  rotated: false</code></pre>
<p>Pangu: 这是一个神器的选项，专门针对强迫症患者，在编译生成页面的时候，中英文之间就会自动添加空格。</p>
<pre><code>pangu: true</code></pre>
<h1 id="内容构建"><a href="#内容构建" class="headerlink" title="内容构建"></a>内容构建</h1><h2 id="更改第一篇内容"><a href="#更改第一篇内容" class="headerlink" title="更改第一篇内容"></a>更改第一篇内容</h2><p>预览的内容还算符合想法，但是主页的第一篇默认为 Hello World，想改成自己的内容。</p>
<p>首先打开/source/_posts/hello-world.md</p>
<pre><code>cd source/_posts
open hello-world.md</code></pre>
<p>然后进行编辑就好啦，hexo和github一样，默认的都是用Markdown语法写作，很简单的一学就会。</p>
<pre><code>---
title: #标题
---

# 一级标题
## 二级标题

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#代码块</span><br></pre></td></tr></table></figure>

[Name](Link) #链接</code></pre>
<h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><p>新建一篇文章的话还是在终端中。</p>
<pre><code>hexo new &#123;name&#125;</code></pre>
<p>然后就像上面更改一样进行写作就好啦，最上面写上时间、标题等。</p>
<pre><code>---
title: 标题 
date: 日期 # 自动创建，如 2019-08-22 11:47:21
tags: 
- 标签1
- 标签2
- 标签3
categories:
- 分类1
- 分类2
---</code></pre>
<h2 id="增加分类页"><a href="#增加分类页" class="headerlink" title="增加分类页"></a>增加分类页</h2><p>因为我不太喜欢标签的管理方式，所以我就只开了分类页，标签页的方式和分类页相似。</p>
<p>增加分类页面，会生成一个 source/categories/index.md 文件。</p>
<pre><code>hexo new page categories</code></pre>
<p>打开后在title下面增加两行。</p>
<pre><code>type: categories
comments: false</code></pre>
<p>然后在主题的 _config.yml 文件里，在menu里打开categories就可以啦。</p>
<pre><code>categories: /categories/ || th</code></pre>
<h2 id="增加搜索页"><a href="#增加搜索页" class="headerlink" title="增加搜索页"></a>增加搜索页</h2><p>增加一个网站内内容的搜索功能。</p>
<p>安装一个hexo-generator-searchdb插件。</p>
<pre><code>npm install hexo-generator-searchdb --save</code></pre>
<p>在项目的 _config.yml 文件里添加search选项。</p>
<pre><code>search:
  path: search.xml
  field: post
  format: html
  limit: 10000</code></pre>
<p>然后在主题的 _config.yml 里面也修改一下。</p>
<pre><code>local_search:
  enable: true
  # If auto, trigger search by changing input.
  # If manual, trigger search by pressing enter key or search button.
  trigger: auto
  # Show top n results per article, show all results by setting to -1
  top_n_per_article: 5
  # Unescape html strings to the readable one.
  unescape: false
  # Preload the search data when the page loads.
  preload: false</code></pre>
<h2 id="添加字数统计和阅读时长"><a href="#添加字数统计和阅读时长" class="headerlink" title="添加字数统计和阅读时长"></a>添加字数统计和阅读时长</h2><p>首先安装一个插件。</p>
<pre><code>npm install hexo-symbols-count-time --save</code></pre>
<p>在项目的 _config.yml 文件里添加。</p>
<pre><code>symbols_count_time:
  symbols: true
  time: true
  total_symbols: true
  total_time: true
  exclude_codeblock: false
  awl: 4
  wpm: 300
  suffix: &quot;mins.&quot;</code></pre>
<p>然后在主题的 _config.yml 里面也修改一下。</p>
<pre><code>symbols_count_time:
  separated_meta: true
  item_text_post: true
  item_text_total: false</code></pre>
<h2 id="增加动态背景"><a href="#增加动态背景" class="headerlink" title="增加动态背景"></a>增加动态背景</h2><p>切换到Next主题文件夹</p>
<pre><code>cd themes/next</code></pre>
<p>安装模块</p>
<pre><code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></pre>
<p>修改主题的 _config.yml </p>
<pre><code># Canvas-nest
# Dependencies: https://github.com/theme-next/theme-next-canvas-nest
canvas_nest:
  enable: true
  onmobile: true # 是否在手机上显示
  color: &quot;255,51,51&quot; # RGB颜色设置
  opacity: 0.5 # 线条透明度
  zIndex: -1 # 显示级别
  count: 160 # 线条的数量，越多越卡</code></pre>
<h1 id="Final-Touch"><a href="#Final-Touch" class="headerlink" title="Final Touch"></a>Final Touch</h1><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>设置了那么多，效果如何呢？让我们先在本地预览一下。</p>
<pre><code>hexo s</code></pre>
<h2 id="更新Github-Page"><a href="#更新Github-Page" class="headerlink" title="更新Github Page"></a>更新Github Page</h2><p>可以直接在终端中运行。</p>
<pre><code>hexo clean
hexo generate
hexo deploy</code></pre>
<p>为了方便，我直接创建了一个脚本文件，这样以后每次更新就只用输入一行就可以了。</p>
<p>创建创建脚本文件。</p>
<pre><code>touch deploy.sh
chmod 755 deploy.sh
./deploy.sh</code></pre>
<p>将文本打开并写入内容，然后执行。</p>
<pre><code>sh deploy.sh</code></pre>
<p>这样一个个人网页就算基本搭建好啦。</p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/05/hello-world/</url>
    <content><![CDATA[<p>作为一个只学过一点python的小白，终于！经过两天的倒腾，终于搞定了这个个人网页！呱唧呱唧喜大普奔！</p>
]]></content>
  </entry>
</search>
